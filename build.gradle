plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

// The current version
def libraryVersion='0.6.3'

group = 'com.github.antkudruk'
version = libraryVersion

java {
    withJavadocJar()
    withSourcesJar()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.12.6'

    testImplementation 'junit:junit:4.13.2',
            'org.powermock:powermock-core:2.0.9',
            'org.powermock:powermock-module-junit4:2.0.9',
            'org.powermock:powermock-api-mockito2:2.0.9'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

if(hasProperty('ossrhUsername') && hasProperty('ossrhPassword')) {
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId = 'uniform-factory'
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                pom {
                    name = 'Uniform Factory'
                    description = 'Builds Adapter based on annotations to handle different classes the common way'
                    url = 'https://github.com/antkudruk'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'antkudruk'
                            name = 'Anton Kudruk'
                            email = 'antkudruk@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:svn:https://oss.sonatype.org/content/repositories/snapshots'
                        developerConnection = 'scm:svn:https://oss.sonatype.org/content/repositories/snapshots'
                        url = 'https://oss.sonatype.org/content/repositories/snapshots'
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }

    signing {
        sign publishing.publications.maven
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

task testExamples {
    doLast {
        def stdout = new ByteArrayOutputStream()
        def files = new File('examples').listFiles()
        def gradlewRelativePath = ['..', '..', '..', 'gradlew'].join(File.separator)
        stdout.println("Test of examples")
        for (File file in files) {
            stdout.println("   Compiling Plugin for the listing ${file.name}")
            exec {
                workingDir "examples/${file.name}/plugin"
                if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                    commandLine 'cmd', '/c', gradlewRelativePath, 'clean', 'test', 'publishToMavenLocal'
                } else {
                    commandLine gradlewRelativePath, 'clean', 'test', 'publishToMavenLocal'
                }
                standardOutput = stdout
            }
            stdout.println("   Compiling Client for the listing ${file.name}")
            exec {
                workingDir "examples/${file.name}/client"
                if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                    commandLine 'cmd', '/c', gradlewRelativePath, 'clean', 'build'
                } else {
                    commandLine gradlewRelativePath, 'clean', 'build'
                }
                standardOutput = stdout
            }
        }
        println "Output: $stdout"
    }
    dependsOn(publishToMavenLocal)
}


