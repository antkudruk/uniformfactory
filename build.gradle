plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

// The current version
def libraryVersion='0.1.3'

group = 'com.github.antkudruk'
version = libraryVersion

java {
    withJavadocJar()
    withSourcesJar()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.11.18'

    testImplementation 'junit:junit:4.12',
            'org.powermock:powermock-core:2.0.4',
            'org.powermock:powermock-module-junit4:2.0.4',
            'org.powermock:powermock-api-mockito2:2.0.4'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'uniform-factory'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'My Library'
                description = 'A concise description of my library'
                url = 'http://www.example.com/library'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'antkudruk'
                        name = 'Anton Kudruk'
                        email = 'antkudruk@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:svn:https://oss.sonatype.org/content/repositories/snapshots'
                    developerConnection = 'scm:svn:https://oss.sonatype.org/content/repositories/snapshots'
                    url = 'https://oss.sonatype.org/content/repositories/snapshots'
                }
            }
        }
    }
    repositories {
        maven {
            // TODO: change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

task testExamples {
    doLast {
        def stdout = new ByteArrayOutputStream()
        def files = new File('examples').listFiles()
        def gradlewRelativePath = ['..', '..', '..', 'gradlew'].join(File.separator)
        stdout.println("Test of examples")
        for (File file in files) {
            stdout.println("   Compiling Plugin for the listing ${file.name}")
            exec {
                workingDir "examples/${file.name}/plugin"
                if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                    commandLine 'cmd', '/c', gradlewRelativePath, 'publishToMavenLocal'
                } else {
                    commandLine gradlewRelativePath, 'publishToMavenLocal'
                }
                standardOutput = stdout
            }
            stdout.println("   Compiling Client for the listing ${file.name}")
            exec {
                workingDir "examples/${file.name}/client"
                if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                    commandLine 'cmd', '/c', gradlewRelativePath, 'clean', 'build'
                } else {
                    commandLine gradlewRelativePath, 'clean', 'build'
                }
                standardOutput = stdout
            }
        }
        println "Output: $stdout"
    }
    dependsOn(publishToMavenLocal)
}


